import asyncio
import random
from os import getenv

from aiogram.utils import keyboard
from dotenv import load_dotenv
from aiogram import F, types, Dispatcher, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

load_dotenv()
token = getenv('TELEGRAM_BOT_TOKEN')
if not token:
    raise ValueError('ERROR: Telegram token not found')

dp = Dispatcher()


class RouletteStates(StatesGroup):
    choosing_bet = State()
    choosing_number_or_color = State()
    spinning = State()


def get_bet_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="10", callback_data="bet_10"),
        types.InlineKeyboardButton(text="50", callback_data="bet_50"),
        types.InlineKeyboardButton(text="100", callback_data="bet_100")
    )
    builder.row(
        types.InlineKeyboardButton(text="üî¥ –ö—Ä–∞—Å–Ω–æ–µ", callback_data="color_red"),
        types.InlineKeyboardButton(text="‚ö´ –ß—ë—Ä–Ω–æ–µ", callback_data="color_black")
    )
    builder.row(
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return builder.as_markup()


def get_numbers_keyboard():
    builder = InlineKeyboardBuilder()
    for i in range(0, 37, 6):
        row = [types.InlineKeyboardButton(text=str(j), callback_data=f"number_{j}")
               for j in range(i, min(i + 6, 37))]
        builder.row(*row)
    return builder


@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É!",
        reply_markup=InlineKeyboardBuilder().add(
            types.InlineKeyboardButton(text="üé∞ –ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É", callback_data="play_roulette")
        ).as_markup()
    )


@dp.callback_query(F.data == "play_roulette")
async def start_roulette(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üé∞ –†—É–ª–µ—Ç–∫–∞\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:",
        reply_markup=get_bet_keyboard()
    )
    await state.set_state(RouletteStates.choosing_bet)


@dp.callback_query(RouletteStates.choosing_bet, F.data.startswith("bet_"))
async def process_bet(callback: CallbackQuery, state: FSMContext):
    bet_amount = int(callback.data.split("_")[1])
    await state.update_data(bet_amount=bet_amount)

    builder = get_numbers_keyboard()
    builder.row(
        types.InlineKeyboardButton(text="üî¥ –ö—Ä–∞—Å–Ω–æ–µ", callback_data="color_red"),
        types.InlineKeyboardButton(text="‚ö´ –ß—ë—Ä–Ω–æ–µ", callback_data="color_black")
    )
    builder.row(
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )

    await callback.message.edit_text(
        f"–°—Ç–∞–≤–∫–∞: {bet_amount}\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ —Ü–≤–µ—Ç:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(RouletteStates.choosing_number_or_color)
    await callback.answer()


@dp.callback_query(RouletteStates.choosing_number_or_color, F.data.startswith(("number_", "color_")))
async def process_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bet_amount = data["bet_amount"]

    if callback.data.startswith("number_"):
        selected = int(callback.data.split("_")[1])
        bet_type = "number"
    else:
        selected = callback.data.split("_")[1]  # "red" –∏–ª–∏ "black"
        bet_type = "color"

    await state.update_data(selected=selected, bet_type=bet_type)

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üéØ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É!", callback_data="spin")),
    builder.row(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel'))


    await callback.message.edit_text(
        f"–°—Ç–∞–≤–∫–∞: {bet_amount}\n–í–∞—à –≤—ã–±–æ—Ä: {selected}\n\n–ì–æ—Ç–æ–≤—ã –∫—Ä—É—Ç–∏—Ç—å?",
        reply_markup=builder.as_markup()
    )
    await state.set_state(RouletteStates.spinning)
    await callback.answer()


@dp.callback_query(RouletteStates.spinning, F.data == "spin")
async def spin_roulette(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    bet_amount = data["bet_amount"]
    selected = data["selected"]
    bet_type = data["bet_type"]

    # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    message = await callback.message.edit_text("üîÑ –†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è...")
    for _ in range(3):
        await asyncio.sleep(1)
        temp_num = random.randint(0, 36)
        await message.edit_text(f"üé∞ –í—ã–ø–∞–¥–∞–µ—Ç: {temp_num}...")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = random.randint(0, 36)
    is_red = result in {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
    color = "red" if is_red else "black" if result != 0 else "zero"

    # –†–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
    if bet_type == "number":
        win = bet_amount * 36 if result == selected else 0
    else:  # color bet
        win = bet_amount * 2 if (selected == color) else 0

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_text = (
        f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} ({color})\n"
        f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {selected}\n"
        f"–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {bet_amount}\n\n"
        f"{'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ' + str(win) if win > 0 else 'üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'}"
    )

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üé∞ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_roulette")
    )

    await message.edit_text(
        result_text,
        reply_markup=builder.as_markup()
    )
    await state.clear()
    await callback.answer()


@dp.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()


async def main():
    bot = Bot(token=token)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())